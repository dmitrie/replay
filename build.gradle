import java.nio.file.*

defaultTasks 'clean', 'test', 'jar', 'uploadArchives'

ext {
  REPO = project.properties['repo'] ?: "${rootDir}/repo"
}

subprojects {

  group='com.codeborne.replay'
  version='1.6-git'

  apply plugin: 'java'
  apply plugin: 'maven'

  archivesBaseName = 'replay-' + project.name

  [compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
  [compileJava, compileTestJava]*.options.collect {options -> options.debug = true}
  compileJava.options.debugOptions.debugLevel = "source,lines,vars"
  sourceCompatibility = 1.10
  targetCompatibility = 1.10

  repositories {
    jcenter()
    mavenCentral()
  }

  sourceSets {
    main {
      java {srcDir 'src'}
      resources {srcDir 'src'}
    }
    test {
      java {srcDir 'test'}
      resources {srcDir 'test'}
    }
  }

  classes.dependsOn ':deps'

  test {
    include 'play/**/*'
    systemProperties['file.encoding'] = 'UTF-8'
  }

  jar {
    manifest {
      attributes(
        "Implementation-Title": project.group + '.' + project.name,
        "Implementation-Version": version,
        "Implementation-Vendor": "Codeborne")
    }
  }

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives jar
    archives sourcesJar
  }

  uploadArchives {
    doFirst {
      new File(REPO).mkdirs()
    }
    repositories {
      mavenDeployer {
        repository(url: "file://${REPO}")
      }
    }
  }
}

def fetchDependencies(destination, dependencies) {
  delete destination
  new File(destination).mkdirs()
  dependencies.grep{it.name.endsWith(".jar")}.grep{!it.name.contains("replay-")}.toSet().each {
      Files.createSymbolicLink(Paths.get("${destination}/${it.name}"), Paths.get(it.path));
  }
}

task deps {
  doLast {
    def compileDependencies = subprojects.collect{it.configurations.compile.collect{it}}.flatten()
    def testDependencies = subprojects.collect{it.configurations.testRuntime.collect{it}}.flatten() - compileDependencies
    fetchDependencies("${rootDir}/build/lib", compileDependencies)
    fetchDependencies("${rootDir}/build/lib-test", testDependencies)
  }
}

task integrationTests(type: GradleBuild) {
  buildFile = 'replay-tests/build.gradle'
  tasks = ['test', 'uitest']
}
